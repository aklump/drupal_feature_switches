var lunrIndex = [{"id":"readme","title":"Feature Switches Module","body":"## Summary\n\nAllows you to flag features as ready or not, live or not from a central \"switchboard\". Based on these switches your codebase can act one way or another.\n\n## How to Define Feature Switches\n\n1. Create a file in the same directory as _settings.php_. Call it _feature\\_switches.php_.\n2. Add to the top of _settings.php_, this line `include_once __DIR__ . '\/feature_switches.php';`\n3. Open _feature\\_switches.php_ and add one or more features, like this:\n\n```php\n\\Drupal\\feature_switches\\FeatureList::global()\n  ->add(\\Drupal\\feature_switches\\Feature::create('show_outlines')\n    ->setDescription('Add outlines to all images.')\n    ->setIsReady(TRUE)\n    ->setIsLive(TRUE)\n  )\n  ->add(\\Drupal\\feature_switches\\Feature::create('user_files_download')\n    ->setDescription('Allow users to download their own backups.')\n    ->setIsReady(TRUE)\n    ->setIsLive(FALSE)\n  );\n```\n\n> For dynamic switch values--such as those depending on the DI container--you will need to set those switches later in the bootstrap of Drupal, for example inside an event listener.\n\n## Setting Switches Inside Event Listeners\n\nIf you have a switch that is dependent on the current user having, say, a given role, you will need to wait until that current user is loaded to calculate that value and set the switch since the container is not yet initialized in _settings.php_ when you defined the switch. So to do that, you can listen for the `\\Symfony\\Component\\HttpKernel\\KernelEvents::REQUEST` event, and then set the value accordingly.\n\nIt's possible to set a switch anywhere in your code, so this is just a tested suggestion. This event is the earliest point when the user is available, in the Drupal bootstrap.\n\nWhen you do this you must have a custom module, where you can add the event listener.\n\nAnd you must declare a dependency on the feature_switches module.\n\n### The Event Listener Class\n\n_my\\_module\/src\/EventSubscriber\/MyModuleFeatureSwitches.php_\n\n```php\nnamespace Drupal\\my_module\\EventSubscriber;\n\nuse Drupal\\feature_switches\\FeatureList;\nuse Symfony\\Component\\HttpKernel\\KernelEvents;\nuse Symfony\\Component\\HttpKernel\\Event\\RequestEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass MyModuleFeatureSwitches implements EventSubscriberInterface {\n\n  \/**\n   * {@inheritdoc}\n   *\/\n  public static function getSubscribedEvents() {\n    $events = [];\n    \/\/ Best practice; use class_exists().\n    \/\/ @link https:\/\/www.drupal.org\/project\/drupal\/issues\/2825358\n    if (class_exists(KernelEvents::CLASS)) {\n      $events[KernelEvents::REQUEST][] = ['setUserDependentFeatureSwitches', 0];\n    }\n\n    return $events;\n  }\n\n  \/**\n   * Respond to a new request event.\n   *\n   * @param RequestEvent $event\n   *   A new event instance.\n   *\/\n  public function setUserDependentFeatureSwitches(RequestEvent $event) {\n    $early_access = in_array('early_access', \\Drupal::currentUser()\n      ->getRoles(TRUE));\n    FeatureList::global()\n      ->get('user_files_download')\n      ->setIsLive($early_access);\n  }\n\n}\n```\n\n### Make a Service Class Entry\n\n_my\\_module.services.yml_\n\n```yaml\nservices:\n  my_module.feature_switches:\n    class: \\Drupal\\my_module\\EventSubscriber\\MyModuleFeatureSwitches\n    tags: [ { name: event_subscriber } ]\n\n```\n\n### Declare Module Dependency\n\n_my\\_module.info.yml_\n\n```yaml\ndependencies:\n  - feature_switches:feature_switches\n\n```\n\n## Using Your Feature Switches\n\nThe whole point of this module to is allow your codebase to react differently based on a feature being live or not. It's quite simple once your features have been created to check them.\n\n### Do Something When the Feature Is Live\n\n```php\nif (\\Drupal\\feature_switches\\FeatureList::isLive('user_files_download')) {\n  \/\/ Proceed with the process...\n}\n```\n\n### Access the Feature Info\n\n```php\n\/** @var \\Drupal\\feature_switches\\Feature $foo_feature *\/\n$download_feature = \\Drupal\\feature_switches\\FeatureList::global()->get('download');\n$download_feature->getId();\n$download_feature->getDescription();\n$download_feature->isReady();\n$download_feature->isLive();\n```"}]